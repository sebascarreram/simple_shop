{"ast":null,"code":"import _objectSpread from \"/Users/sebascarreram/Website/simple-mern-project/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/sebascarreram/Website/simple-mern-project/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sebascarreram/Website/simple-mern-project/frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\nimport './App.css';\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        loadedProducts = _useState2[0],\n        setLoadedProducts = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/products');\n      const responseData = await response.json();\n      setLoadedProducts(responseData.products);\n      setIsLoading(false);\n    };\n\n    fetchProducts();\n  }, []);\n\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      const newProduct = {\n        title: productName,\n        price: +productPrice // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat(_objectSpread({}, newProduct, {\n          id: responseData.product.id\n        }));\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(NewProduct, {\n    onAddProduct: addProductHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), isLoading && React.createElement(\"p\", {\n    className: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Loading...\"), !isLoading && React.createElement(ProductList, {\n    items: loadedProducts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sebascarreram/Website/simple-mern-project/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewProduct","ProductList","App","loadedProducts","setLoadedProducts","isLoading","setIsLoading","fetchProducts","response","fetch","responseData","json","products","addProductHandler","productName","productPrice","newProduct","title","price","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevProducts","concat","id","product","error","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA,oBAC+BL,QAAQ,CAAC,EAAD,CADvC;AAAA;AAAA,QACNM,cADM;AAAA,QACUC,iBADV;;AAAA,qBAEqBP,QAAQ,CAAC,KAAD,CAF7B;AAAA;AAAA,QAENQ,SAFM;AAAA,QAEKC,YAFL;;AAIbR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,aAAa,GAAG,YAAY;AAChCD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AAEA,YAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEAP,MAAAA,iBAAiB,CAACM,YAAY,CAACE,QAAd,CAAjB;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARD;;AAUAC,IAAAA,aAAa;AACd,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMM,iBAAiB,GAAG,OAAOC,WAAP,EAAoBC,YAApB,KAAqC;AAC7D,QAAI;AACF,YAAMC,UAAU,GAAG;AACjBC,QAAAA,KAAK,EAAEH,WADU;AAEjBI,QAAAA,KAAK,EAAE,CAACH,YAFS,CAEI;;AAFJ,OAAnB;AAIA,UAAII,QAAQ,GAAG,KAAf;AACA,YAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC5DW,QAAAA,MAAM,EAAE,MADoD;AAE5DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAFsD;AAG5DQ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHmD,OAAlC,CAA5B;;AAQA,UAAI,CAAChB,QAAQ,CAACiB,EAAd,EAAkB;AAChBN,QAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,YAAMT,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,UAAIQ,QAAJ,EAAc;AACZ,cAAM,IAAIO,KAAJ,CAAUhB,YAAY,CAACiB,OAAvB,CAAN;AACD;;AAEDvB,MAAAA,iBAAiB,CAACwB,YAAY,IAAI;AAChC,eAAOA,YAAY,CAACC,MAAb,mBACFb,UADE;AAELc,UAAAA,EAAE,EAAEpB,YAAY,CAACqB,OAAb,CAAqBD;AAFpB,WAAP;AAID,OALgB,CAAjB;AAMD,KA9BD,CA8BE,OAAOE,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAK,CAACL,OAAN,IAAiB,uBAAlB,CAAL;AACD;AACF,GAlCD;;AAoCA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,YAAY,EAAEd,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGR,SAAS,IAAI;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFhB,EAGG,CAACA,SAAD,IAAc,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEF,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHjB,CAFF,CADF;AAUD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\nimport './App.css';\n\nfunction App() {\n  const [loadedProducts, setLoadedProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/products');\n\n      const responseData = await response.json();\n\n      setLoadedProducts(responseData.products);\n      setIsLoading(false);\n    };\n\n    fetchProducts();\n  }, []);\n\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      const newProduct = {\n        title: productName,\n        price: +productPrice // \"+\" to convert string to number\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat({\n          ...newProduct,\n          id: responseData.product.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewProduct onAddProduct={addProductHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <ProductList items={loadedProducts} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}